// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    artists       Artist[]
}

model Artist {
  id String @id @default(uuid())
  name String?
  albums Album[]

  userId String
  belongsTo User @relation(fields: [userId], references: [id])

  @@index([userId])
}


model Album {
  id String @id @default(uuid())
  name String?
  songs Song[]

  artistId String
  belongsTo Artist @relation(fields: [artistId], references: [id])

  @@index([artistId])
}

model Song {
  id String @id @default(cuid())
  name String?
  url String?
  version Int? @default(1)
  notes Note[]

  albumId String
  belongsTo Album @relation(fields: [albumId], references: [id])

  @@index([albumId])
}

model Note {
  id String @id @default(cuid())
  content String?
  checked Boolean? @default(false)

  songId String
  belongsTo Song @relation(fields: [songId], references: [id])

  @@index([songId])
}
